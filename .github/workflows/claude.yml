name: Claude Code

concurrency:
  group: claude-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    # Simplified trigger: Run on any @claude mention unless other workflows should handle it
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude') && 
       !contains(github.event.issue.labels.*.name, 'needs-clarification') &&
       !contains(github.event.issue.labels.*.name, 'spec-in-progress') &&
       !contains(github.event.issue.labels.*.name, 'ready-for-implementation')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: write      # Enhanced: Allow branch creation and commits
      pull-requests: write # Enhanced: Allow PR creation and comments
      issues: write        # Enhanced: Allow issue updates and comments
      id-token: write
      actions: read # Required for Claude to read CI results on PRs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # This is an optional setting that allows Claude to read CI results on PRs
          additional_permissions: |
            actions: read
          
          # Optional: Specify model (defaults to Claude Sonnet 4, uncomment for Claude Opus 4)
          # model: "claude-opus-4-20250514"
          
          # Optional: Customize the trigger phrase (default: @claude)
          # trigger_phrase: "/claude"
          
          # Optional: Trigger when specific user is assigned to an issue
          # assignee_trigger: "claude-bot"
          
          # Allow Claude to run development and quality check commands
          allowed_tools: |
            Bash(npm install)
            Bash(npm run build)
            Bash(npm run lint)
            Bash(npm run type-check)
            Bash(npm test --passWithNoTests)
          
          # Custom instructions for IlliniHunt V2 development
          custom_instructions: |
            You are Claude, an AI assistant helping with IlliniHunt V2 development - a Product Hunt-style platform for UIUC students.
            
            ## Project Context
            - **Frontend**: React 18 + TypeScript + Vite + Tailwind CSS + shadcn/ui components
            - **Backend**: Supabase (PostgreSQL + Auth + Real-time subscriptions)
            - **Authentication**: Google OAuth restricted to @illinois.edu emails
            - **Deployment**: Vercel with automatic deployments
            - **Design System**: UIUC brand colors (uiuc-orange: #FF6B35, uiuc-blue: #13294B)
            
            ## Code Quality Standards
            - **TypeScript**: Strict mode enabled, avoid `any` types
            - **React**: Functional components with hooks, proper state management
            - **Styling**: Tailwind CSS with existing design system, mobile-first responsive
            - **Testing**: Add tests for new functionality when applicable
            - **Performance**: Optimize for mobile devices, lazy loading where appropriate
            - **Accessibility**: ARIA labels, keyboard navigation, semantic HTML
            
            ## Communication Style
            - Be friendly and encouraging, especially with student contributors
            - Explain technical decisions clearly for non-technical users
            - Use emojis and clear formatting for readability
            - Provide specific, actionable guidance
            - Ask clarifying questions when requirements are unclear
            
            ## Workflow Integration
            You may be part of an automated development workflow:
            1. **Requirement Clarification**: Ask detailed questions to understand user needs
            2. **Specification Generation**: Create comprehensive technical specifications
            3. **Implementation**: Write production-ready code following specifications
            4. **Code Review**: Provide thorough reviews focusing on quality and best practices
            
            Always identify which phase of the workflow you're in and respond appropriately.
            
            ## Academic Context
            - This is a learning platform for UIUC students
            - Contributions often connect to coursework (CS 225, CS 411, CS 465, BADM 350, etc.)
            - Emphasize learning opportunities and best practices
            - Encourage collaboration between students of different experience levels
          
          # Optional: Custom environment variables for Claude
          # claude_env: |
          #   NODE_ENV: test

