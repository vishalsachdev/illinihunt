name: Claude Emergency Fallback

# Fallback concurrency group - only runs if smart router fails
concurrency:
  group: claude-fallback-${{ github.event.issue.number || github.event.pull_request.number || github.ref }}
  cancel-in-progress: false

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  pull_request_review:
    types: [submitted]

jobs:
  fallback-response:
    # Only run if @claude mentioned and main workflow hasn't responded in last 10 minutes
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude'))
    
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
      issues: write
      pull-requests: write
      id-token: write
    
    steps:
      - name: Check if main workflow already responded
        id: check-recent-activity
        uses: actions/github-script@v7
        with:
          script: |
            const { context } = require('@actions/github');
            
            // Get issue or PR number
            const issueNumber = context.issue?.number || context.payload.pull_request?.number;
            if (!issueNumber) {
              console.log('No issue/PR number found');
              core.setOutput('should_respond', 'false');
              return;
            }
            
            try {
              // Check for recent claude[bot] comments (last 10 minutes)
              const tenMinutesAgo = new Date(Date.now() - 10 * 60 * 1000).toISOString();
              
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                since: tenMinutesAgo
              });
              
              const recentClaudeComment = comments.find(comment => 
                comment.user.login === 'claude[bot]' && 
                comment.created_at > tenMinutesAgo
              );
              
              if (recentClaudeComment) {
                console.log('Recent Claude response found, skipping fallback');
                core.setOutput('should_respond', 'false');
              } else {
                console.log('No recent Claude response, proceeding with fallback');
                core.setOutput('should_respond', 'true');
              }
              
            } catch (error) {
              console.log(`Error checking recent activity: ${error.message}`);
              // If we can't check, err on the side of responding
              core.setOutput('should_respond', 'true');
            }

      - name: Wait for main workflow
        if: steps.check-recent-activity.outputs.should_respond == 'true'
        run: |
          echo "Waiting 2 minutes for main workflow to respond..."
          sleep 120

      - name: Check again after waiting
        if: steps.check-recent-activity.outputs.should_respond == 'true'
        id: check-after-wait
        uses: actions/github-script@v7
        with:
          script: |
            const { context } = require('@actions/github');
            
            const issueNumber = context.issue?.number || context.payload.pull_request?.number;
            if (!issueNumber) {
              core.setOutput('final_should_respond', 'false');
              return;
            }
            
            try {
              // Check for recent claude[bot] comments again
              const twoMinutesAgo = new Date(Date.now() - 2 * 60 * 1000).toISOString();
              
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                since: twoMinutesAgo
              });
              
              const recentClaudeComment = comments.find(comment => 
                comment.user.login === 'claude[bot]' && 
                comment.created_at > twoMinutesAgo
              );
              
              if (recentClaudeComment) {
                console.log('Main workflow responded during wait, canceling fallback');
                core.setOutput('final_should_respond', 'false');
              } else {
                console.log('Main workflow still not responding, proceeding with fallback');
                core.setOutput('final_should_respond', 'true');
              }
              
            } catch (error) {
              console.log(`Error in final check: ${error.message}`);
              core.setOutput('final_should_respond', 'true');
            }

      - name: Checkout repository
        if: steps.check-after-wait.outputs.final_should_respond == 'true'
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Provide fallback response
        if: steps.check-after-wait.outputs.final_should_respond == 'true'
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          
          custom_instructions: |
            ðŸš¨ **Fallback Mode Activated**
            
            The main IlliniHunt V2 automation workflow appears to be experiencing issues. 
            You are operating in emergency fallback mode with limited capabilities.
            
            Your role in fallback mode:
            1. ACKNOWLEDGE that you're in fallback mode
            2. PROVIDE basic assistance to the user
            3. EXPLAIN any limitations
            4. DIRECT users to alternative support if needed
            5. ESCALATE to human maintainers if appropriate
            
            ## Project Context (Limited)
            - **Frontend**: React 18 + TypeScript + Vite + Tailwind CSS + shadcn/ui
            - **Backend**: Supabase (PostgreSQL + Auth + Real-time)
            - **Deployment**: Vercel
            - **Authentication**: Google OAuth restricted to @illinois.edu
            
            ## Fallback Capabilities
            - Basic code review and suggestions
            - General programming help and explanations
            - Architecture guidance
            - Learning resources and documentation
            
            ## Limitations in Fallback Mode
            - Cannot create branches or pull requests
            - Cannot run builds or tests
            - Cannot manage GitHub labels automatically
            - Cannot access full automated workflow features
            
            ## Communication Guidelines
            - Start your response with a clear fallback mode notice
            - Be honest about limitations
            - Provide helpful guidance within constraints
            - Suggest escalation paths when appropriate
            - Maintain encouraging tone for student contributors
            
            ## Example Response Format
            ```
            ðŸš¨ **Emergency Fallback Mode**
            
            I'm currently operating in fallback mode due to an issue with the main automation workflow.
            I can provide basic assistance, but some advanced features are temporarily unavailable.
            
            [Your helpful response here]
            
            For complex implementation tasks or urgent issues, please:
            - Tag @vishalsachdev for human assistance
            - Check GitHub Discussions for community support
            - Try again later when the main workflow is restored
            ```
            
            Remember: You're helping maintain continuity of service for student contributors 
            while the main automation system is being restored.

      - name: Notify maintainers of fallback activation
        if: steps.check-after-wait.outputs.final_should_respond == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const { context } = require('@actions/github');
            
            // Create an issue to track the workflow failure
            try {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: '[AUTOMATION] Main Claude workflow fallback activated',
                body: `## ðŸš¨ Workflow Fallback Activated
                
                The emergency fallback workflow was triggered, indicating the main \`claude-smart-router\` workflow may be experiencing issues.
                
                **Trigger Event:** ${context.eventName}
                **Issue/PR:** #${context.issue?.number || context.payload.pull_request?.number}
                **Time:** ${new Date().toISOString()}
                **Workflow Run:** ${context.runId}
                
                **Action Required:**
                1. Check the main workflow status
                2. Review recent workflow runs for errors
                3. Verify secrets and permissions are configured correctly
                4. Test the smart router workflow functionality
                
                **User Impact:**
                - Students may experience limited automation features
                - Manual intervention may be required for complex requests
                - Basic @claude functionality is maintained via fallback
                
                This issue will auto-close when the main workflow is verified working.`,
                labels: ['bug', 'automation', 'priority-high']
              });
              
              console.log('Created workflow failure tracking issue');
              
            } catch (error) {
              console.log(`Failed to create tracking issue: ${error.message}`);
            }